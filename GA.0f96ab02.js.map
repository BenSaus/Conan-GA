{"version":3,"sources":["ConanGA/RandUtil.js","ConanGA/GAFunctions.js","ConanGA/GAGenome.js","ConanGA/GA.js"],"names":["RangeInt","low","high","Math","floor","random","module","exports","Rand","require","SinglePointCrossover","ga","father","mother","child1","child2","settings","crossoverRate","chromosomeCount","crossoverPoint","i","chromosomes","RouletteWheelSelection","population","slice","totalFitnessScore","total","length","fitness","Error","Selection","Crossover","Mutation","Genome","ContainerGenome","id","chromo","FloatGenome","chromosomeNumber","x","newChrom","push","str","concat","Functions","Genomes","GA","initPopulation","_testSettings","_setDefaults","populationSize","_createInitalPopulation","generation","popSize","createGenomeFunc","mutationRate","elitism","fitnessFunc","mutationFunc","selectionFunc","crossoverFunc","_updateFitnessScores","babyNum","babies","fittestGenome","bestFitnessScore","genome","export"],"mappings":"ACAA,ADAA,ICAMQ,IAAI,CDADR,ECAIS,MDAb,CCAoB,ADAFR,CCAG,EDArB,EAAuBC,IAAvB,EAA6B,ECAT,CAApB,EAEA;ADDI,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBH,IAA3B,IAAmCD,GAA1C;AACH;ACED,SAASS,oBAAT,CAA8BC,EAA9B,EAAkCC,MAAlC,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0DC,MAA1D,EAAkE;AAC9D,ADDJT,MAAM,CAACC,OAAP,GAAiB;ACEb,ADDAP,EAAAA,ICCIG,IAAI,ADDA,CCCCE,CDDTL,KCCI,KAAgBW,EAAE,CAACK,QAAH,CAAYC,aAA5B,IAA6CL,MAAM,KAAKC,MAA5D,EAAoE;AAChEC,ADHS,CAAjB,GCGQA,MAAM,GAAGF,MAAT;AACAG,IAAAA,MAAM,GAAGF,MAAT;AAEA;AACH;;AAED,MAAIK,eAAe,GAAGN,MAAM,CAACM,eAA7B;AEbJ,AFcI,IEdE0B,EFcEzB,OEdO,GAAGV,IFcI,GEdG,AFcAD,CEdC,GFcG,CAACR,QAAL,CAAc,CAAd,CEdA,CAAzB,AFc0CkB,eAAe,GAAG,CAAnC,CAArB;;AEbJ,AFeI,IEfE2B,GFeG,IEfI,AFeAzB,CAAC,EEfEX,CFeC,CAAb,EAAgBW,CAAC,EEfE,CAAC,AFeAD,YEfD,CAAvB,CFeI,CEbJ,CFawCC,CAAC,EAArC,EAAyC;AACrCN,IAAAA,MAAM,CAACO,WAAP,CAAmBD,CAAnB,IAAwBR,MAAM,CAACS,WAAP,CAAmBD,CAAnB,CAAxB;AACAL,IAAAA,MAAM,CAACM,WAAP,CAAmBD,CAAnB,IAAwBP,MAAM,CAACQ,WAAP,CAAmBD,CAAnB,CAAxB;AACH,IEdC0B;AACF,cAAY9B,QAAZ,EAAsB+B,cAAtB,EAAsC;AAAA,AFetC,OAAK,IAAI3B,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAGD,cAApB,EAAoCC,EAAC,EAArC,EAAyC;AACrCN,IAAAA,MAAM,CAACO,WAAP,CAAmBD,EAAnB,IAAwBP,MAAM,CAACQ,WAAP,CAAmBD,EAAnB,CAAxB;AEfA,AFgBAL,IAAAA,KEhBKiC,CFgBC,CAAC3B,WEhBP,AFgBA,CEhBmBL,AFgBAI,EAAnB,IAAwBR,EEhBxB,IFgB8B,CAACS,WAAP,CAAmBD,EAAnB,CAAxB;AACH,ACxBL;ACQQ,AFiBP,ACvBD,EDyBA,OEnBaJ,QAAL,GAAgBA,QAAhB;ADLR;ACMQ,ADLR,SCKaiC,YAAL,CAAkBjC,QAAlB;AFoBR,ACxBA,SDwBSM,sBAAT,CAAgCX,EAAhC,EAAoCY,UAApC,EAAgD;AElBxC,AFmBJ,ACxBJ,MDwBQC,EEnBI,CAACuB,EFmBA,GAAG5C,IAAI,CAACE,IEnBb,EAAqB,AFmBb,KAAgBM,EAAE,CAACc,iBAA/B;AElBQ,AFmBR,ACxBJ,MDwBQC,IEnBQ,CAACV,AFmBJ,GAAG,CAAZ,IEnBqB,CAACkC,cAAd,EAA8B;AAC1B,ADLhB,cCKsB,IAAIrB,KAAJ,CAAU,gCAAV,CAAN;AACH,AFmBT,ACxBJ,ODwBS,IAAIT,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,UAAU,CAACI,MAA/B,EAAuCP,CAAC,EAAxC,EAA4C;AACxCM,ACxBR,IDwBQA,KAAK,IAAIH,UAAU,CAACH,CAAD,CAAV,CAAcQ,OAAvB;AEnBI,ADJZ,WCIiBL,UAAL,GAAkB,KAAK4B,uBAAL,CACd,KAAKnC,QAAL,CAAckC,cADA,CAAlB;AAGH,AFkBD,ACxBR,KCDQ,GFyBIxB,GElBG,EFkBE,IAAIF,KAAb,EAAoB;AEjBhB,AFkBA,ACxBZ,WCMiBD,EFkBEA,QElBP,EFkBiB,CElBCwB,AFkBA3B,CAAD,CAAjB,YElBA;AACA,AFkBH,ACvBT,WCKiBJ,QAAL,CAAckC,cAAd,GAA+B,KAAK3B,UAAL,CAAgBI,MAA/C;AACH,AFkBJ,ICtBCM,SACF,kBAAc;AAAA;ACKV,AFkBJ,QAAM,CElBGmB,GFkBCvB,KAAJ,CAAU,CElBZ,GAAkB,CAAlB,4BFkBE,CAAN;AEjBC,AFkBJ,ACvBO,EDyBR,KCzBaD,OAAL,GAAe,CAAf;AD0BR,ACzBQ,OAAKP,WAAL,GAAmB,EAAnB;AD2BR,AC1BQ,OAAKH,eAAL,GAAuB,CAAvB;AACH,GAGL;4CCC4BmC,SAAS;AAC7B,AFsBR/C,MAAM,CAACC,GEtBKgB,IFsBZ,GAAiB,GEtBK,GAAG,EAAjB;AFuBJO,EAAAA,ECvBEI,ODuBO,EAAE;AErBP,AFsBAZ,IAAAA,OEtBK,IAAIiB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGc,AFsBE,EAAtB/B,KEtBA,EAA6BiB,CAAC,EAA9B,EAAkC;AAC9BhB,AFoBG,GADE,KEnBLA,UAAU,CAACkB,IAAX,CAAgB,KAAKzB,QAAL,CAAcsC,gBAAd,EAAhB;AACH,AFsBLvB,EAAAA,SAAS,EAAE;AACPrB,IAAAA,oBAAoB,EAApBA;AErBA,AFoBO,ACzBX,GDqBa,UEhBFa,UAAP,IDLQF,WAAZ,EAAyB;ACMxB,AFsBDW,AC5ByB,ED4BzBA,QAAQ,EAAE;AAPG,CAAjB;ACrB6B;iCCQZhB,UAAU;AACnB,ADRA,UCQI,CAACA,QAAQ,CAACuC,YAAd,EAA4B;AACxB,ADRJ,UAAKrC,GCQIF,QAAL,CAAcuC,GDRlB,GAAuBlC,MCQnB,GAA6B,EDRC,CAACM,ECQ/B,IDRJ,CAFqB,CAIrB;ACOC;ADND,QAAIQ,EAAE,GAAG,CAAT;ACOA,UAAI,CAACnB,QAAQ,CAACC,aAAd,EAA6B;AACzB,ADPJ,SAAK,ICOID,ADPAoB,MAAT,ECOI,CAAcnB,CDPCI,WAAnB,CCOI,CDP4B,ECOE,GAA9B;AACH,ADPG,YAAKA,WAAL,CAAiBc,EAAjB,IAAuBC,MAAvB;AACAD,MAAAA,EAAE;ACON,ADNC,UCMG,OAAOnB,QAAQ,CAACwC,OAAhB,KAA4B,WAAhC,EAA6C;AACzC,aAAKxC,QAAL,CAAcwC,OAAd,GAAwB,IAAxB;AACH,ADjBoB;ACkBxB,ADRA;;;EAXyBvB,SAc9B,uBCOkBjB,UAAU;AACpB,UAAI,CAACA,QAAQ,CAACyC,WAAd,EAA2B;AACvB,cAAM,IAAI5B,KAAJ,CAAU,8BAAV,CAAN;AACH,IDRHQ;;ACSE,UAAI,CAACrB,QAAQ,CAAC0C,YAAd,EAA4B;AACxB,cAAM,IAAI7B,KAAJ,CAAU,+BAAV,CAAN;AACH;ADVL,uBAAYS,gBAAZ,EAA8B;ACW1B,ADX0B,UCWtB,CAACtB,QAAQ,CAAC2C,aAAd,EAA6B;AACzB,cAAM,IAAI9B,KAAJ,CAAU,gCAAV,CAAN;AACH,ADbyB;;ACc1B,ADbA,UCaI,CAACb,QAAQ,CAAC4C,aAAd,EAA6B;AACzB,ADZJ,WAAK1C,GCYK,IAAIW,KAAJ,CAAU,EDZpB,GAAuBS,gBAAvB,CAH0B,CAK1B,SCUU,CAAN;AACH;ADVD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,gBAApB,EAAsCC,CAAC,EAAvC,EAA2C;ACW3C,ADVI,UCUA,ADVIC,CCUHxB,ODVW,CCUH,CAACsC,CDVKnD,IAAI,CAACE,MAAL,EAAf,ECUJ,EAAgC;AAC5B,cAAM,IAAIwB,KAAJ,CAAU,oCAAV,CAAN;AACH,ADXG,aAAKR,WAAL,CAAiBoB,IAAjB,CAAsBD,QAAtB;ACYP,ADXI;;AATyB;AAU7B,6BCYQ;AACL;AACA,UAAI,KAAKY,UAAL,KAAoB,CAAxB,EAA2B,KAAKS,oBAAL,GAFtB,CAEkD;;AAEvD,UAAIC,OAAO,GAAG,CAAd,CAJK,CAML,QDhBO;AACP,UAAIpB,GAAG,GAAG,EAAV;ACgBA,ADdAA,MAAAA,GAAG,CCcGqB,ADdFpB,MCcQ,ADdZ,CAAW,ECcI,EAAf,CAPK,CASL,QDhByB,KAAKf,OAAnB,GAA6B,IAAxC;;ACiBA,ADfA,UCeI,CDfC,ICeIZ,ADfAI,CAAC,GAAG,CAAb,EAAgBA,CCeZ,ADfa,CCeCoC,EDfEtC,KCepB,EAA2B,QDf3B,EAAqCE,CAAC,EAAtC,EAA0C;ACgBtC0C,ADfApB,QCeAoB,ADfApB,GAAG,CAACC,GCeG,GAAG,ADfV,CCeA,ADfWtB,WAAW,CAACD,CAAD,CAAX,GAAiB,IAA5B;ACgBA2C,ADfH,QCeGA,MAAM,CAACtB,IAAP,CAAY,KAAKuB,aAAjB;AACAD,QAAAA,MAAM,CAACtB,IAAP,CAAY,KAAKuB,aAAjB;AACH,ADfD,aAAOtB,GAAP;AACH;ACgBG,aAAOoB,OAAO,GAAG,KAAK9C,QAAL,CAAckC,cAA/B,EAA+C;AAC3C;AACA,YAAMrC,MAAM,GAAG,KAAKG,QAAL,CAAc2C,aAAd,CAA4B,IAA5B,EAAkC,KAAKpC,UAAvC,CAAf;AACA,ED1CcU,UC0CRrB,MAAM,GAAG,KAAKI,QAAL,CAAc2C,aAAd,CAA4B,IAA5B,EAAkC,KAAKpC,UAAvC,CAAf,CAH2C,CAK3C;;AACA,ADnBZjB,MAAM,CAACC,KCmBSO,EDnBhB,GAAiB,CCmBK,GAAG,KAAKE,QAAL,CAAcsC,gBAAd,EAAb;AACA,ADnBRrB,EAAAA,MAAM,EAANA,ECmBYlB,IDpBC,ECoBK,GAAG,KAAKC,QAAL,CAAcsC,gBAAd,EAAb;AAEA,ADpBRpB,EAAAA,WCoBalB,IDpBE,EAAfkB,ECoBQ,CAAc0B,YDtBT,CCsBL,CAA4B,IAA5B,EAAkChD,MAAlC,EAA0CC,MAA1C,EAAkDC,MAAlD,EAA0DC,MAA1D,EAT2C,CAW3C;ADrBRsB,EAAAA,WAAW,EAAXA,WAHa,CAIb;ACqBQ,ADpBR,YCoBYlC,IAAI,CAACE,MAAL,KAAgB,KAAKW,QAAL,CAAcuC,YAAlC,EAAgD;AAC5C,eAAKvC,QAAL,CAAc0C,YAAd,CAA2B5C,MAA3B;AACH,AD3BI,CAAjB;;AC4BY,YAAIX,IAAI,CAACE,MAAL,KAAgB,KAAKW,QAAL,CAAcuC,YAAlC,EAAgD;AAC5C,eAAKvC,QAAL,CAAc0C,YAAd,CAA2B3C,MAA3B;AACH,SAjB0C,CAmB3C;;;AACAgD,QAAAA,MAAM,CAACD,OAAD,CAAN,GAAkBhD,MAAlB;AACAiD,QAAAA,MAAM,CAACD,OAAO,GAAG,CAAX,CAAN,GAAsB/C,MAAtB;AAEA+C,QAAAA,OAAO,IAAI,CAAX;AACH;;AAED,WAAKvC,UAAL,GAAkBwC,MAAlB;AACA,WAAKX,UAAL;;AAEA,WAAKS,oBAAL;AACH;;;2CAEsB;AACnB,WAAKI,gBAAL,GAAwB,CAAxB;AACA,WAAKD,aAAL,GAAqB,IAArB;AACA,WAAKvC,iBAAL,GAAyB,CAAzB,CAHmB,CAGQ;;AAHR,iDAKA,KAAKF,UALL;AAAA;;AAAA;AAKnB,4DAAoC;AAAA,cAA3B2C,MAA2B;AAChCA,UAAAA,MAAM,CAACtC,OAAP,GAAiB,KAAKZ,QAAL,CAAcyC,WAAd,CAA0BS,MAA1B,CAAjB;AACA,eAAKzC,iBAAL,IAA0ByC,MAAM,CAACtC,OAAjC;;AAEA,cAAIsC,MAAM,CAACtC,OAAP,GAAiB,KAAKqC,gBAA1B,EAA4C;AACxC,iBAAKA,gBAAL,GAAwBC,MAAM,CAACtC,OAA/B;AACA,iBAAKoC,aAAL,GAAqBE,MAArB;AACH;AACJ;AAbkB;AAAA;AAAA;AAAA;AAAA;AActB;;;0CAEqB;AAClB,aAAO,KAAKD,gBAAZ;AACH;;;uCAEkB;AACf,aAAO,KAAKD,aAAZ;AACH;;;;;;AAGL1D,MAAM,CAAC6D,MAAP,GAAgB;AACZrB,EAAAA,EAAE,EAAFA,EADY;AAEZF,EAAAA,SAAS,EAATA,SAFY;AAGZC,EAAAA,OAAO,EAAPA;AAHY,CAAhB","file":"GA.0f96ab02.js","sourceRoot":"..\\src","sourcesContent":["function RangeInt(low, high) {\r\n    return Math.floor(Math.random() * high) + low\r\n}\r\n\r\nmodule.exports = {\r\n    RangeInt,\r\n}\r\n","const Rand = require(\"./RandUtil\")\r\n\r\n// Crossover Functions ==================================\r\n\r\nfunction SinglePointCrossover(ga, father, mother, child1, child2) {\r\n    // If the mother and father are the same simply return both of them as children\r\n    if (Math.random() > ga.settings.crossoverRate || father === mother) {\r\n        child1 = father\r\n        child2 = mother\r\n\r\n        return\r\n    }\r\n\r\n    let chromosomeCount = father.chromosomeCount\r\n    let crossoverPoint = Rand.RangeInt(0, chromosomeCount - 1)\r\n\r\n    for (let i = 0; i < crossoverPoint; i++) {\r\n        child1.chromosomes[i] = father.chromosomes[i]\r\n        child2.chromosomes[i] = mother.chromosomes[i]\r\n    }\r\n\r\n    for (let i = 0; i < crossoverPoint; i++) {\r\n        child1.chromosomes[i] = mother.chromosomes[i]\r\n        child2.chromosomes[i] = father.chromosomes[i]\r\n    }\r\n}\r\n\r\n// Selection Functions ==================================\r\n\r\nfunction RouletteWheelSelection(ga, population) {\r\n    let slice = Math.random() * ga.totalFitnessScore\r\n    let total = 0\r\n\r\n    for (let i = 0; i < population.length; i++) {\r\n        total += population[i].fitness\r\n\r\n        if (total >= slice) {\r\n            return population[i]\r\n        }\r\n    }\r\n\r\n    throw new Error(\"There was an error in selection\")\r\n}\r\n\r\n// function TournamentSelection() {\r\n// }\r\n\r\n// Mutation Functions ===================================\r\n\r\nmodule.exports = {\r\n    Selection: {\r\n        RouletteWheelSelection,\r\n    },\r\n    Crossover: {\r\n        SinglePointCrossover,\r\n    },\r\n    Mutation: {},\r\n}\r\n","// A chromosome is a singular piece of DNA. A genome is a full set of chromosomes.\r\n\r\n// TODO: Is this needed??\r\n// General chromo that can be used with ContainerGenome\r\n// class GeneralChromo {\r\n//     constructor(id, value, label) {\r\n//         this.id = id\r\n//         this.value = value\r\n//         this.label = label\r\n//     }\r\n//     ToString() {\r\n//         return value + \" \" + label\r\n//     }\r\n// }\r\n\r\n// Genomes ==================================================\r\n\r\nclass Genome {\r\n    constructor() {\r\n        this.fitness = 0\r\n        this.chromosomes = []\r\n        this.chromosomeCount = 0\r\n    }\r\n}\r\n\r\n// Used to contain a set of chromosomes, which can be anything\r\n\r\nclass ContainerGenome extends Genome {\r\n    constructor(chromosomes) {\r\n        super()\r\n        this.chromosomeCount = chromosomes.length\r\n\r\n        // Store the given chromosomes\r\n        let id = 0\r\n        for (let chromo in chromosomes) {\r\n            this.chromosomes[id] = chromo\r\n            id++\r\n        }\r\n    }\r\n}\r\n\r\n// Used to hold an array of floats\r\n\r\nclass FloatGenome extends Genome {\r\n    constructor(chromosomeNumber) {\r\n        super()\r\n\r\n        this.chromosomeCount = chromosomeNumber\r\n\r\n        // Create chromosomeCount number of float chromosomes\r\n        for (let x = 0; x < chromosomeNumber; x++) {\r\n            let newChrom = Math.random()\r\n            this.chromosomes.push(newChrom)\r\n        }\r\n    }\r\n\r\n    ToString() {\r\n        let str = \"\"\r\n\r\n        str.concat(\"Fitness: \" + this.fitness + \"\\n\")\r\n\r\n        for (let i = 0; i < chromosomeCount; i++) {\r\n            str.concat(chromosomes[i] + \"\\n\")\r\n        }\r\n\r\n        return str\r\n    }\r\n}\r\n\r\nmodule.exports = {\r\n    Genome,\r\n    ContainerGenome,\r\n    FloatGenome,\r\n    // BinaryGenome\r\n    // IntegerGenome\r\n}\r\n","const Functions = require(\"./GAFunctions\")\r\nconst Genomes = require(\"./GAGenome\")\r\n\r\n// Primary Algorithm =======================================\r\n\r\nclass GA {\r\n    constructor(settings, initPopulation) {\r\n        this._testSettings(settings)\r\n        this.settings = settings\r\n        this._setDefaults(settings)\r\n\r\n        if (!initPopulation) {\r\n            if (!settings.populationSize) {\r\n                throw new Error(\"Population size is not defined\")\r\n            }\r\n            this.population = this._createInitalPopulation(\r\n                this.settings.populationSize\r\n            )\r\n        } else {\r\n            this.population = initPopulation\r\n            this.settings.populationSize = this.population.length\r\n        }\r\n\r\n        this.generation = 0\r\n    }\r\n\r\n    _createInitalPopulation(popSize) {\r\n        let population = []\r\n\r\n        for (let x = 0; x < popSize; x++) {\r\n            population.push(this.settings.createGenomeFunc())\r\n        }\r\n\r\n        return population\r\n    }\r\n\r\n    _setDefaults(settings) {\r\n        if (!settings.mutationRate) {\r\n            this.settings.mutationRate = 0.001\r\n        }\r\n        if (!settings.crossoverRate) {\r\n            this.settings.crossoverRate = 0.7\r\n        }\r\n        if (typeof settings.elitism === \"undefined\") {\r\n            this.settings.elitism = true\r\n        }\r\n    }\r\n\r\n    _testSettings(settings) {\r\n        if (!settings.fitnessFunc) {\r\n            throw new Error(\"Fitness function not defined\")\r\n        }\r\n        if (!settings.mutationFunc) {\r\n            throw new Error(\"Mutation function not defined\")\r\n        }\r\n        if (!settings.selectionFunc) {\r\n            throw new Error(\"Selection function not defined\")\r\n        }\r\n        if (!settings.crossoverFunc) {\r\n            throw new Error(\"Crossover function not defined\")\r\n        }\r\n        if (!settings.createGenomeFunc) {\r\n            throw new Error(\"Create Genome function not defined\")\r\n        }\r\n    }\r\n\r\n    Evolve() {\r\n        // if this is the first generation evaluate fitness\r\n        if (this.generation === 0) this._updateFitnessScores() // not sure if this should be here\r\n\r\n        let babyNum = 0\r\n\r\n        // allocate new array for children\r\n        const babies = []\r\n\r\n        // keep two copies of the best genome if elitism is on\r\n        if (this.settings.elitism) {\r\n            babyNum = 2\r\n            babies.push(this.fittestGenome)\r\n            babies.push(this.fittestGenome)\r\n        }\r\n\r\n        while (babyNum < this.settings.populationSize) {\r\n            //Select mother and father\r\n            const mother = this.settings.selectionFunc(this, this.population)\r\n            const father = this.settings.selectionFunc(this, this.population)\r\n\r\n            //Produce children\r\n            let child1 = this.settings.createGenomeFunc()\r\n            let child2 = this.settings.createGenomeFunc()\r\n\r\n            this.settings.crossoverFunc(this, father, mother, child1, child2)\r\n\r\n            //Mutate Children\r\n            if (Math.random() > this.settings.mutationRate) {\r\n                this.settings.mutationFunc(child1)\r\n            }\r\n            if (Math.random() > this.settings.mutationRate) {\r\n                this.settings.mutationFunc(child2)\r\n            }\r\n\r\n            //Store the babies\r\n            babies[babyNum] = child1\r\n            babies[babyNum + 1] = child2\r\n\r\n            babyNum += 2\r\n        }\r\n\r\n        this.population = babies\r\n        this.generation++\r\n\r\n        this._updateFitnessScores()\r\n    }\r\n\r\n    _updateFitnessScores() {\r\n        this.bestFitnessScore = 0\r\n        this.fittestGenome = null\r\n        this.totalFitnessScore = 0 // Used for Roulette Wheel Selection\r\n\r\n        for (let genome of this.population) {\r\n            genome.fitness = this.settings.fitnessFunc(genome)\r\n            this.totalFitnessScore += genome.fitness\r\n\r\n            if (genome.fitness > this.bestFitnessScore) {\r\n                this.bestFitnessScore = genome.fitness\r\n                this.fittestGenome = genome\r\n            }\r\n        }\r\n    }\r\n\r\n    GetBestFitnessScore() {\r\n        return this.bestFitnessScore\r\n    }\r\n\r\n    GetFittestGenome() {\r\n        return this.fittestGenome\r\n    }\r\n}\r\n\r\nmodule.export = {\r\n    GA,\r\n    Functions,\r\n    Genomes,\r\n}\r\n"]}